TDStringLeafNode{#name:'analysis',#contents:'dkh 2/14/2015 10:09
-------------------
Delays are definitely need. When I ran my first test of FlowRESTAPIv10Test>>inFlowAppTestGetOne, the test failed, because the test ran BEFORE the server had a chance to start ... It is worth noting that the server was left running ...

I am reminded that the way I work with remote servers, is that I tail the log file while running tests, so that I can see what\'s going on.

For Flow you\'d expect the FlowAppServer_server-3333.log file to look like the following when doing a start/stop:

topaz 1> run
(GemServerRegistry gemServerNamed: \'FlowAppServer\') scriptStartServiceOn: 3333.
%
--transcript--\'scriptLogEvent: \'\'-->>Script Start FlowAppServer on 3333\'\'\'
--transcript--\'scriptLogEvent: \'\'recordGemPid: FlowAppServer on 3333\'\'\'
--transcript--\'scriptLogEvent: \'\'setStatmonCacheName: FlowAppServer\'\'\'
--transcript--\'scriptLogEvent: \'\'enableRemoteBreakpointHandling: FlowAppServer\'\'\'
--transcript--\'scriptLogEvent: \'\'startTransactionBacklogHandling: FlowAppServer\'\'\'
--transcript--\'scriptLogEvent: \'\'enable AlmostOutOfMemoryHandling: FlowAppServer\'\'\'
GemStone signal handler: signal 15 (SIGTERM), received from process 27686 userId 562
  si_code: 0 at 1423937563, SI_USER, signal from kill(2), sigsend(2), raise(3C) or abort(3C)

Note the logging of the SIGTERM ... that happens when the gem server is stopped. 

dkh 2/14/2015 10:15
-------------------
1. removed `debugMode:` call in GemstoneApp class>>setupServer since it isn\'t necessary.

2. Added two `(Delay forSeconds: 3) wait` calls in FlowRESTAPIv10Test>>startFlowAppDo:. One after the start and one after the reset.

I prefer to put delays into the test calls rather than the GemServer, because Delays are always either too long or too short, so it\'s better for the application to decide what Delays to use ... if any... The tests on the other hand MUST have Delays.

dkh 2/14/2015 10:22
-------------------
Another thing I do is open another terminal window where I run this bash script: `ps -efw | grep topaz` ... I use this to find a kill a gem server that is running when it shouldn\'t be ... i.e., missing SIGTERM in log file.

Don\'t forget that when you kill a topaz, the pid file will be left around and a subsequent start will fail with a message about the pid file still being around ... a gem server won\'t start if a corresponding pid file still exist.

So for tests I use `restart` instead of `start` so that I don\'t have to worry about rogue pid files lying around ... `restart` nukes the pid file whether or not there is a corresponding process running.

dkh 2/14/2015 10:52
-------------------
Changed FlowRESTAPIv10Test>>startFlowAppDo: to use GemstoneApp class>>restart and to use GemstoneApp class>>stop in addition to GemstoneApp class>>reset ... reset does not stop servers, so that is very likely a source of many problems ... we will see.


dkh 2/14/2015 10:56
-------------------
After making these changes, I find that GemstoneApp class>>restart doesn\'t work because the reset unregisters gem server ... restart should clearly not be unregistering the gem server ... I expect resetart to simply restart the gemservers... and leave the rest of the system start alone ... soooo I\'ll remove the reset from restart....

dkh 2/14/2015 11:03
-------------------
That doesn\'t appear to work either .... GemstoneApp class>>start appears to do double duty of initializing some state and stop destroys a bunch of stuff ...

I think that GemstoneApp is trying to do too much in start and stop .... 

For the other gem server tests I do all of the work in the test itself ... once I get that straightened out, I think I\'ll be able put together a tODE script for controlling things and from that the set of class methods can be derived.

dkh 2/14/2015 11:16
-------------------
Reverting all changes I\'ve made up to this point and starting over, by copying the FlowRESTAPIv10Test class and doing all of the setup without invoking GemstoneApp.

dkh 2/14/2015 12:49
-------------------
The new test class, FlowRESTAPIv10TestA is setup to run gem servers correctly and the tests are setup so that you can interactively debug the server...I also created a debugGemServer tODE script for starting the gem server.

When run singly, #testGetOne was consistently passing so I ran the full test suite and 6 passed and 2 failed with errors ... One of the errored tests was testGetOne, so it was presumably a \"random\" error.

I ran the test suite again and caught an error in #testGetOne ... a commit failure during startFlowAppDo:. Here\'s the conflicts dictionary:

1@       -> #\'commitResult\'->#\'retryFailure\'
2@       -> #\'Rc-Write-Write\'->anArray( aRcKeyValueDictionary( \'AppTests\'->aMaplessGemstoneDatabase))
3@       -> #\'RcReadSet\'->anArray( aRcQueueSessionComponent( aRcQueueEntry, aRcQueueEntry, aRcQueueEntry, aRcQueueEntry, aRcQueueEntry, aRcQueueEntry, a...

The commit result being #retryFailure means that there is a problem using an RcKeyValueDictionary ... if I had to guess, I\'d say that there are multiple sessions updating the \'AppTests\' association .... but perhaps you guys know more?
',#creationTime:DateAndTime['2015-02-14T11:59:43.3151609897613-08:00'],#modificationTime:DateAndTime['2015-02-14T13:15:44.168967962265-08:00']}